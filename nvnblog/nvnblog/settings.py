"""
Django settings for nvnblog project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
load_dotenv()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2wx!2%7$yw5m#(0f7_81ppt&n+ni31_0uno(e1p9y6n$c@)i%s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

CSRF_TRUSTED_ORIGINS = [
    "https://naveenkumarsaini.click",  # your custom domain
    # "https://django-alb-1728931504.ap-south-1.elb.amazonaws.com",     # optional if you're testing with ALB DNS directly
]

# Tell Django the original protocol was HTTPS, even though it's HTTP internally
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Secure Cookies – keep these True, since end-user uses HTTPS
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# SECURE_SSL_REDIRECT:
# ✅ Only set True if the app can detect HTTPS via the X-Forwarded-Proto header
# SECURE_SSL_REDIRECT = True

# Application definition

INSTALLED_APPS = [
    'storages',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'tailwind',
    'theme',
    'django_browser_reload',
]

TAILWIND_APP_NAME = 'theme'
NPM_BIN_PATH = r'C:\Program Files\nodejs\npm.cmd'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = 'nvnblog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR/"templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nvnblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER': os.getenv("USER_POSTGRES"),
        'PASSWORD': os.getenv("PASS_POSTGRES"),
        'HOST': 'mydatabase.c1gwqw8wybwe.ap-south-1.rds.amazonaws.com',  # Or the IP address/hostname of your PostgreSQL server
        'PORT': '5432',           # Leave empty for default (5432), or specify if different
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_ROOT = BASE_DIR/"staticfiles"
# STATIC_URL = 'static/'
STATICFILES_DIRS=[BASE_DIR/"static"]
MEDIA_ROOT= BASE_DIR/"uploads"
# MEDIA_URL= "/uploads/"
# configure aws s3
AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = 'nvn-blog-bucket1'
AWS_S3_REGION_NAME = 'ap-south-1'  # e.g., 'us-east-1'
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

STATICFILES_FOLDER= "static"
MEDIAFILES_FOLDER= "media"

STATICFILES_STORAGE = "custom_storages.StaticFileStorage"
DEFAULT_FILE_STORAGE = "custom_storages.MediaFileStorage"

# Optional: Control file overwriting

AWS_S3_FILE_OVERWRITE = False
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# force_storage_backend.py

from django.conf import settings
from importlib import import_module
from django.core.files import storage as file_storage
from django.contrib.staticfiles import storage as static_storage

# --- STATICFILES_STORAGE ---
static_path = settings.STATICFILES_STORAGE  # 'custom_storages.StaticFileStorage'
module, class_name = static_path.rsplit('.', 1)
StaticStorage = getattr(import_module(module), class_name)
static_storage.staticfiles_storage = StaticStorage()

# --- DEFAULT_FILE_STORAGE (optional) ---
default_path = settings.DEFAULT_FILE_STORAGE  # 'custom_storages.MediaFileStorage'
module, class_name = default_path.rsplit('.', 1)
DefaultStorage = getattr(import_module(module), class_name)
file_storage.default_storage = DefaultStorage()
